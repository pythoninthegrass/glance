---
- name: Deploy working directory to remote server
  hosts: servers
  gather_facts: true
  tasks:
    - name: Create git directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/git"
        state: directory
        mode: '0755'

    - name: Install dependencies on remote server
      ansible.builtin.package:
        name:
          - rsync
        state: present

    - name: Sync glance directory to remote server
      ansible.posix.synchronize:
        src: ./
        dest: "{{ ansible_env.HOME }}/git/glance/"
        delete: true
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.venv"
          - "--exclude=*.log"
          - "--exclude=.DS_Store"
        rsync_path: rsync

- name: Deploy with Uncloud
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Check existing volumes
      ansible.builtin.command:
        cmd: uc volume ls
      register: volume_list
      changed_when: false

    - name: Create glance_config volume
      ansible.builtin.command:
        cmd: uc volume create glance_config
      when: "'glance_config' not in volume_list.stdout"

    - name: Create glance_assets volume
      ansible.builtin.command:
        cmd: uc volume create glance_assets
      when: "'glance_assets' not in volume_list.stdout"

    - name: Remove existing glance service
      ansible.builtin.command:
        cmd: uc rm glance
      ignore_errors: true

    - name: Deploy glance service
      ansible.builtin.expect:
        command:
          bash -c "export $(grep -v '^#' .env | xargs) && uc deploy -f compose.yml"
        chdir: "{{ playbook_dir }}"
        responses:
          'Choose.*:': 'y'

- name: Copy files to Docker volumes
  hosts: servers
  gather_facts: false
  tasks:
    - name: Wait for container to be running
      ansible.builtin.pause:
        seconds: 5

    - name: Copy config files to volume
      ansible.builtin.shell:
        cmd: |
          docker run --rm \
            -v glance_config:/dest \
            -v {{ ansible_env.HOME }}/git/glance/config:/src:ro \
            alpine sh -c "rm -rf /dest/* && cp -a /src/. /dest/"
      args:
        executable: /bin/bash

    - name: Check if assets directory exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/git/glance/assets"
      register: assets_dir

    - name: Copy assets files to volume
      ansible.builtin.shell:
        cmd: |
          docker run --rm \
            -v glance_assets:/dest \
            -v {{ ansible_env.HOME }}/git/glance/assets:/src:ro \
            alpine sh -c "rm -rf /dest/* && cp -a /src/. /dest/"
      args:
        executable: /bin/bash
      when: assets_dir.stat.exists

    - name: Find glance container ID
      ansible.builtin.shell:
        cmd: docker ps --filter "name=glance-" --format "{{ '{{.ID}}' }}"
      register: glance_container_id
      changed_when: false

    - name: Restart glance container
      ansible.builtin.command:
        cmd: docker restart {{ glance_container_id.stdout }}
      when: glance_container_id.stdout != ""
      changed_when: true
